#! /bin/sh
### BEGIN INIT INFO
# Provides:          node-daemon
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: nodejs deamon start-up launching
# Description:       This script launch a list of nodejs daemon provide 
#                    on /etc/node-daemon/node-daemon.conf
### END INIT INFO

# Author: Edouard FERRARI <edouard.ferrari@gmail.com>
#

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="launch nodejs daemon"
NAME="node-daemon"
NODE="node"
DAEMON=`whereis $NODE |awk '{print $2}'`
DAEMON_ARGS=""
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
if [ ! -x $DAEMON ] ; then
    echo "There is no daemon find '$DAEMON' as name"
    exit 0
fi

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

# Read configuration variable file if it is present
[ -r /etc/$NAME/$NAME.conf ] \
  && . /etc/$NAME/$NAME.conf \
  || echo "Configuration file need to be configure : "/etc/$NAME/$NAME.conf

find_daemon() {
    REQUIRED=$1

    echo >&2 "DAEMONS : $DAEMONS"

    for daemon in $DAEMONS; do
	[ `basename $daemon` = $REQUIRED ] && echo $daemon
    done 
    echo >&2 $1' not find on $DAEMONS in /etc/node-daemon/node-daemon.conf'
    echo "false"
}

do_start_launch() {
    PIDFILE=$1
    DAEMON=$2
    DAEMON_ARGS=$3

    [ ! -f $DAEMON_ARGS ] && echo "Script doesn't exist : $DAEMON_ARGS" && return 1
    if [ !  -d '/var/log/node-daemon' ]; then
	echo "Please create /var/log/node-daemon with the 'exploit' user"
	exit 1
    fi

    echo "Starting $DAEMON $DAEMON_ARGS"
    if [ "$VERBOSE" != no ]; then
	echo "DAEMON : $DAEMON"
	echo "DAEMON_ARGS : $DAEMON_ARGS"
	echo "PIDFILE : $PIDFILE"
    fi

    start-stop-daemon --start --quiet --pidfile $PIDFILE --exec $DAEMON --test > /dev/null
    if [ "$?" -ne 0 ]; then
	[ "$VERBOSE" != no ] && echo "Daemon already launch" 
	return 1
    fi
    start-stop-daemon --background --make-pidfile --start --quiet --pidfile $PIDFILE \
	--exec $DAEMON --chuid exploit -- $DAEMON_ARGS > /var/log/node-daemon-`basename $DAEMON_ARGS` 2>&1
    case "$?" in
	0|1) [ "$VERBOSE" != no ] && echo "OK" ;;
	2) [ "$VERBOSE" != no ] && echo "Error" ;;
    esac
    return 0
}

do_start()
{
    if [ ! -z "$1" ]; then
	$DAEMON_ARGS=$( find_daemon $1 )
	[ 'false' = "$DAEMON_ARGS" ] && exit 1
	PIDFILE=/var/run/$NAME-`basename $DAEMON_ARGS`.pid

	do_start_launch $PIDFILE $DAEMON $DAEMON_ARGS
    else
	for DAEMON_NAME in $DAEMONS; do
	    DAEMON_ARGS="$DAEMON_NAME"
	    PIDFILE=/var/run/$NAME-`basename $DAEMON_NAME`.pid

	    do_start_launch $PIDFILE $DAEMON $DAEMON_ARGS || continue
	done
    fi
}

#
# Function that stops the daemon/service
#
do_stop_kill()
{
    PIDFILE=$1
    DAEMON=$DAEMON

    [ ! -f $PIDFILE ] && echo "Pidfile doesn't exist : $PIDFILE" && return 1

    echo -n "Kill $DAEMON from $PIDFILE ... "    

    start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $PIDFILE
    RETVAR=$?
    [ "$RETVAR" = 0 ] && echo "OK" && return 0
    
    start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
    RETVAL=$?
    [ "$RETVAR" = 0 ] && echo "OK" && return 0
    [ "$RETVAL" = 0 ] && "An error occured during killing process"

    rm -f $PIDFILE
    return "$RETVAL"
}

do_stop()
{
    if [ ! -z "$1" ]; then
	PIDFILE=/var/run/$NAME-$1.pid

	do_stop_kill $PIDFILE $DAEMON
    else
	for DAEMON_NAME in $DAEMONS; do
	    PIDFILE=/var/run/$NAME-`basename $DAEMON_NAME`.pid

	    do_stop_kill $PIDFILE $DAEMON || continue
	done
    fi
}

do_status_check() {
    PIDFILE=$1
    SCRIPT_NAME=$2

    [ ! -f $PIDFILE ] && echo "$SCRIPT_NAME : KO" && return 1

    NULL=`ps aux | grep \`cat $1\` | grep -v grep`
    [ $? -eq 0 ] && echo "$SCRIPT_NAME : OK" || echo "$SCRIPT_NAME : KO"
}

do_status()
{
    if [ ! -z "$1" ]; then
	PIDFILE=/var/run/$NAME-$1.pid

	do_status_check $PIDFILE $1
    else
	for DAEMON_NAME in $DAEMONS; do
	    PIDFILE=/var/run/$NAME-`basename $DAEMON_NAME`.pid

	    do_status_check $PIDFILE $DAEMON_NAME || continue
	done
    fi
}

case "$1" in
  start)
	do_start $2
	;;
  stop)
	do_stop $2
	;;
  status)
       do_status $2 && exit 0 || exit $?
       ;;
  restart)
	do_stop $2
	do_start $2
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|status|restart} [name]" >&2
	echo "\t - name : specify action to only one daemon" >&2
	exit 3
	;;
esac

:
